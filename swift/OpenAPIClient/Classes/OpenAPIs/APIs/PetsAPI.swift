//
// PetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PetsAPI {
    /**
     Create a pet
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPets(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createPetsWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create a pet
     - POST /pets
     - returns: RequestBuilder<Void> 
     */
    open class func createPetsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/pets"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all pets
     
     - parameter limit: (query) How many items to return at one time (max 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPets(limit: Int? = nil, completion: @escaping ((_ data: [Pet]?,_ error: Error?) -> Void)) {
        listPetsWithRequestBuilder(limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List all pets
     - GET /pets
     - responseHeaders: [x-next(String)]
     - parameter limit: (query) How many items to return at one time (max 100) (optional)
     - returns: RequestBuilder<[Pet]> 
     */
    open class func listPetsWithRequestBuilder(limit: Int? = nil) -> RequestBuilder<[Pet]> {
        let path = "/pets"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Pet]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Info for a specific pet
     
     - parameter petId: (path) The id of the pet to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showPetById(petId: String, completion: @escaping ((_ data: Pet?,_ error: Error?) -> Void)) {
        showPetByIdWithRequestBuilder(petId: petId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Info for a specific pet
     - GET /pets/{petId}
     - parameter petId: (path) The id of the pet to retrieve 
     - returns: RequestBuilder<Pet> 
     */
    open class func showPetByIdWithRequestBuilder(petId: String) -> RequestBuilder<Pet> {
        var path = "/pets/{petId}"
        let petIdPreEscape = "\(APIHelper.mapValueToPathItem(petId))"
        let petIdPostEscape = petIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{petId}", with: petIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Pet>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
